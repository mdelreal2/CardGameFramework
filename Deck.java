import java.util.Random;
import java.util.ArrayList;
import java.util.Collections;

public class Deck 
{
	//private variables that will represent a 52 card deck
	private ArrayList<Card> deck = new ArrayList<Card>();
	//this specific variable decreases to a minimum of 0 every time the user calls dealCards()
	private int deckIndex = 51;
	
	//constructor that will store 52 unique standard playing cards into 'deck' ArrayList
	Deck()
	{
		//iterate for every suit possibility
		for (int i = 0; i < 4; i++)
		{
			//iterate for every card value possibility
			for (int j = 0; j < 13; j++)
			{
				//variable that will be set to a card suit depending on the current iteration of 'i'
				String suit = "";

				if (i == 0)
				{
					suit = "HEARTS";
				}
				
				else if (i == 1)
				{
					suit = "SPADES";
				}
				
				else if (i == 2)
				{
					suit = "CLUBS";
				}
				
				else if (i == 3)
				{
					suit = "DIAMONDS";
				}
				
				//initializing a Card object with the parameters generated by the current iteration of 'i' and 'j'
				Card tempCard = new Card(j + 1, suit);

				//pushing the 'tempCard' object into the 'deck' ArrayList
				deck.add(tempCard);
			}
		}
	}
	
	//method that will randomize the positions of the 'deck's Card objects 
	void shuffleDeck()
	{
		//Using the Random class to create a Random object that will generate a number between 0 and the current 'deckIndex'
		Random random = new Random();
		
		//after each iteration, the 'back' of the deck will be the 'deckSize' subtracted by the 'i'th iteration so that none of the swapped cards can be swapped again
		for (int i = 0; i < this.deckIndex; i++)
		{
			int change = i + random.nextInt(this.deckIndex - i);
			//method from the Collections class that takes in the 'deck' ArrayList, the index of the element to be swapped and the destination index to swap the two elements
			Collections.swap(deck, i, change);
		}
	}
	
	//method that will return an ArrayList of Card objects with however many cards the user wants through the parameter. Throws an exception if the parameter exceeds the 'deckIndex' value
	ArrayList<Card> dealCards(int numCards) throws DeckException
	{
		//ArrayList to be returned
		ArrayList<Card> cards = new ArrayList<Card>();
		
		//check to make sure that there are enough cards in the Deck to draw. Otherwise throw a DeckException
		if (numCards > deckIndex)
		{
			throw new DeckException("Not enough cards in the deck");
		}
		
		//if there are enough cards in the deck to draw from, draw from the 'deck' at 'deckIndex' and add the Card objects to the 'cards' ArrayList
		else
		{
			for (int i = deckIndex; i > deckIndex - numCards; i--)
			{
				cards.add(deck.get(i));
			}
			
			//setting 'deckIndex' to a new value of its current value subtracted by the number of cards the user entered through the parameter
			deckIndex -= numCards;
		}
		
		return cards;
	}
	
	//method that will call the print() method in the Card class for each element in 'deck'
	void printDeck()
	{
		for (int i = 0; i < deck.size(); i++)
		{
			deck.get(i).print();
		}
	}
	
	//method that returns the current value of 'deckIndex'
	int getDeckIndex()
	{
		return this.deckIndex;
	}
}
